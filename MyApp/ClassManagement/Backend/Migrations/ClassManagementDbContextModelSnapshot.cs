// <auto-generated />
using System;
using ClassManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ClassManagementDbContext))]
    partial class ClassManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassManagement.Models.Absent", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(16)");

                    b.Property<DateTime>("DateAbsent")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "SubjectId", "DateAbsent");

                    b.HasIndex("SubjectId");

                    b.ToTable("Absent");
                });

            modelBuilder.Entity("ClassManagement.Models.Class", b =>
                {
                    b.Property<string>("ClassId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("varchar(16)");

                    b.HasKey("ClassId");

                    b.HasIndex("TeacherId")
                        .IsUnique();

                    b.ToTable("Class");
                });

            modelBuilder.Entity("ClassManagement.Models.District", b =>
                {
                    b.Property<string>("DistrictId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("varchar(16)");

                    b.HasKey("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("ClassManagement.Models.Province", b =>
                {
                    b.Property<string>("ProvinceId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("ClassManagement.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassId")
                        .HasColumnType("varchar(16)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictId")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("DistrictId")
                        .IsUnique()
                        .HasFilter("[DistrictId] IS NOT NULL");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("ClassManagement.Models.StudentScore", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(16)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("StudentId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudentScore");
                });

            modelBuilder.Entity("ClassManagement.Models.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("ClassManagement.Models.SubjectRegisted", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasColumnType("varchar(16)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("ClassId")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("varchar(16)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("SubjectId", "Semester");

                    b.HasIndex("ClassId");

                    b.HasIndex("TeacherId")
                        .IsUnique()
                        .HasFilter("[TeacherId] IS NOT NULL");

                    b.ToTable("SubjectRegisted");
                });

            modelBuilder.Entity("ClassManagement.Models.Teacher", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictId")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("ClassManagement.Models.Absent", b =>
                {
                    b.HasOne("ClassManagement.Models.Student", "Student")
                        .WithMany("Absent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassManagement.Models.Subject", "Subject")
                        .WithMany("Absent")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ClassManagement.Models.Class", b =>
                {
                    b.HasOne("ClassManagement.Models.Teacher", "Teacher")
                        .WithOne("Class")
                        .HasForeignKey("ClassManagement.Models.Class", "TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ClassManagement.Models.District", b =>
                {
                    b.HasOne("ClassManagement.Models.Province", "Province")
                        .WithMany("District")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ClassManagement.Models.Student", b =>
                {
                    b.HasOne("ClassManagement.Models.Class", "Class")
                        .WithMany("Student")
                        .HasForeignKey("ClassId");

                    b.HasOne("ClassManagement.Models.District", "District")
                        .WithOne("Student")
                        .HasForeignKey("ClassManagement.Models.Student", "DistrictId");

                    b.Navigation("Class");

                    b.Navigation("District");
                });

            modelBuilder.Entity("ClassManagement.Models.StudentScore", b =>
                {
                    b.HasOne("ClassManagement.Models.Student", "Student")
                        .WithMany("StudentScore")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassManagement.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ClassManagement.Models.SubjectRegisted", b =>
                {
                    b.HasOne("ClassManagement.Models.Class", "Class")
                        .WithMany("SubjectRegisted")
                        .HasForeignKey("ClassId");

                    b.HasOne("ClassManagement.Models.Subject", "Subject")
                        .WithMany("SubjectRegisted")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassManagement.Models.Teacher", "Teacher")
                        .WithOne("SubjectRegisted")
                        .HasForeignKey("ClassManagement.Models.SubjectRegisted", "TeacherId");

                    b.Navigation("Class");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ClassManagement.Models.Teacher", b =>
                {
                    b.HasOne("ClassManagement.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.Navigation("District");
                });

            modelBuilder.Entity("ClassManagement.Models.Class", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("SubjectRegisted");
                });

            modelBuilder.Entity("ClassManagement.Models.District", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("ClassManagement.Models.Province", b =>
                {
                    b.Navigation("District");
                });

            modelBuilder.Entity("ClassManagement.Models.Student", b =>
                {
                    b.Navigation("Absent");

                    b.Navigation("StudentScore");
                });

            modelBuilder.Entity("ClassManagement.Models.Subject", b =>
                {
                    b.Navigation("Absent");

                    b.Navigation("SubjectRegisted");
                });

            modelBuilder.Entity("ClassManagement.Models.Teacher", b =>
                {
                    b.Navigation("Class")
                        .IsRequired();

                    b.Navigation("SubjectRegisted");
                });
#pragma warning restore 612, 618
        }
    }
}
